@{
ViewData["Title"] = "Change Role";
}

@model ChangeRoleVM.ChangeRoleVMDto;

<section class="w-full p-1 sm:p-6 flex my-4 flex-col gap-4 justify-center items-center">
    <h1 class="text-2xl font-extrabold text-primary">Change Role</h1>

    <div class="flex flex-col w-full max-w-[500px] gap-4 border border-gray-400 bg-white rounded-md shadow-lg">
        <div class="flex flex-row w-full p-2 gap-4">
            <img class="w-20 h-20 object-contain rounded-full" src="/files/public/@ViewBag.ImageId" alt="avatar">

            <div class="flex w-full flex-col break-words justify-center">
                <div class="flex sm:flex-row flex-wrap flex-col-reverse sm:gap-2">
                    <p class="text-base text-gray-900 font-bold">@ViewBag.FirstName @ViewBag.LastName</p>
                    <p class="flex flex-row text-sm gap-1">
                        <span class="text-secondary">(</span>
                        <span class="text-primary">@ViewBag.Role</span>
                        <span class="text-secondary">)</span>
                    </p>
                </div>
                <p class="text-sm sm:text-base break-all max-w-fit text-gray-800 font-[400]">@ViewBag.Email</p>
            </div>
        </div>

        <form class="flex flex-row justify-center items-center p-2 px-6 w-full gap-2" method="post" action='/admin/change-role/@ViewBag.Id'>
            <div class="flex flex-row gap-2 w-full justify-center items-center relative">
                <label id="select-label"
                    class="text-base absolute bottom-[20%] left-[20%] z-10 font-extralight text-gray-600 transition-all ease-in-out"
                    for="select">Select New Role</label>

                <i class="fa-solid fa-id-card-clip text-gray-600 text-base"></i>
                <div id="select-target" class="flex flex-col w-full relative">
                    <input autocomplete="off"
                        class="p-2 border border-gray-400 h-fit  hover:border-gray-900 focus:outline-secondary rounded-sm w-full"
                        id="select" name="NewRole" value="@Model.NewRole">
                    <datalist
                        class="absolute w-full shadow-lg max-h-40 top-[100%] bg-white no-scrollbar border rounded-md border-t-0 p-2 overflow-y-scroll">

                        @{
                        var Options = new string[] {"PROJECT_MANGER", "REPORTER", "DEVELOPER"};
                        foreach (string role in Options) {
                        if (role != ViewBag.Role.ToString()) {
                        <option onclick="ChoseOption(this)"
                            class="bg-white hover:bg-indigo-200 rounded-md hover:font-extrabold text-gray-600 p-1 mb-1 text-base cursor-pointer"
                            value="@role">@role</option>
                        }
                        }
                        }

                    </datalist>

                </div>

            </div>
            <div class="flex flex-col break-keep justify-center w-fit">
                <button
                    type="submit"
                    class="border-2 bg-secondary border-secondary hover:bg-white hover:opacity-95 hover:shadow-lg text-xs p-2 w-fit text-primary sm:text-ellipsis font-bold rounded-md shadow-md">submit</button>
            </div>
        </form>
                        @Html.ValidationMessageFor(model => model.NewRole, null, new {@class = "text-red-600 mb-4 text-center text-base font-bold"})
    </div>

</section>


@section Scripts {
<script src="/js/input.js"></script>
<script>
    const input = document.getElementById("select");
    const target = document.getElementById("select-target");
    const datalist = document.querySelector("datalist");
    const label = document.getElementById("select-label");

    input.addEventListener("focus", (e) => datalist.style.display = 'block');

    document.addEventListener('click', (e) => {
        if (!e.composedPath().includes(target)) datalist.style.display = 'none';
    });

    input.addEventListener("input", (e) => {
        const text = input.value.toLowerCase();

        for (let option of datalist.options) {
            const optionValue = option.value.toLowerCase();
            if (optionValue.startsWith(text)) option.style.display = "block";
            else option.style.display = "none";
        }

    });

    const ChoseOption = (e) => {
        input.value = e.value;
        datalist.style.display = 'none';
        label.className = "sr-only";
        console.log(e.value);
    }


</script>
}
