@{
  ViewData["Title"] = "Create Project";
}

<section class="flex flex-col justify-center items-center max-w-[100vw] h-auto">
  <div class="rounded-xl bg-white flex flex-col gap-4 w-80 p-2 items-center justify-center shadow-xl">

    @if (!String.IsNullOrEmpty(ViewData["Error"]?.ToString()))
    {
    <p class="text-red-600 text-center text-base font-bold">@ViewData["Error"]</p>
    }



    <h1 class="text-primary font-bold text-2xl text-center">Create Project</h1>

    <form class="flex-col flex w-full justify-center items-center" action="/admin/create-project" method="post">

      <div class="flex flex-col justify-center items-center p-2 px-6 w-full gap-2">
        <div class="flex flex-row gap-2  w-full justify-center items-center relative">
          <label
            class="text-base absolute bottom-[20%] left-[20%] font-extralight text-gray-600 transition-all ease-in-out"
            for="ProjectName">Project Name</label>
          <i class="fa-solid fa-user text-gray-600 text-base"></i>
          <input
            class="p-2 border border-gray-400 h-fit hover:border-gray-900 focus:outline-secondary rounded-sm w-full"
            type="text" id="ProjectName" name="ProjectName" />
        </div>
        @* @Html.ValidationMessageFor(model => model.ProjectName, null, new {@class = "text-red-600 text-center
        text-base font-bold"}) *@
      </div>

      <div class="flex flex-col justify-center items-center p-2 px-6 w-full gap-2">
        <div class="flex flex-row gap-2  w-full justify-center items-center relative">
          <label
            class="text-base absolute bottom-[20%] left-[20%] font-extralight text-gray-600 transition-all ease-in-out"
            for="Description">Description</label>
          <i class="fa-solid fa-user text-gray-600 text-base"></i>
          <input
            class="p-2 border border-gray-400 h-fit hover:border-gray-900 focus:outline-secondary rounded-sm w-full"
            type="text" id="Description" name="Description" />
        </div>
        @* @Html.ValidationMessageFor(model => model.Description, null, new {@class = "text-red-600 text-center
        text-base font-bold"}) *@
      </div>


      <div class="flex flex-col justify-center items-center p-2 px-6 w-full gap-2">
        <div class="flex flex-row gap-2 w-full justify-center items-center relative">

          <label
            id="browsers-label"
            class="text-base absolute bottom-[20%] left-[20%] z-10 font-extralight text-gray-600 transition-all ease-in-out"
            for="browsers">Select Browser</label>

          <i class="fa-solid fa-user text-gray-600 text-base"></i>
          <div id="select-target" class="flex flex-col w-full relative">
            <input autocomplete="off"
              class="p-2 border border-gray-400 h-fit  hover:border-gray-900 focus:outline-secondary rounded-sm w-full"
              id="browsers" name="browsers">

            <datalist id="browsers"
              class="absolute w-full shadow-lg max-h-40 top-[100%] bg-white no-scrollbar border rounded-md border-t-0 p-2 overflow-y-scroll">
              @foreach (var item in (dynamic) ViewData["data"])
              {
                <option onclick="ChoseOption(this)" class="bg-white hover:bg-indigo-200 rounded-md hover:font-extrabold text-gray-600 p-1 mb-1 text-base cursor-pointer" value="@item">@item</option>
              }
            </datalist>
          </div>

        </div>
        @* @Html.ValidationMessageFor(model => model.Description, null, new {@class = "text-red-600 text-center
        text-base font-bold"}) *@
      </div>

      <div class="flex justify-center">
        <button type="submit"
          class="text-primary bg-secondary text-center p-2 rounded-md border-0 text-base font-bold
           cursor-pointer transition-all  ease-in-out shadow-lg hover:shadow-xl hover:text-lg hover:border-gray-600 hover:text-white">
          submit
        </button>
      </div>

    </form>

</section>
</div>

<script defer src="/js/input.js"></script>
<script defer src="/js/select.js"></script>
